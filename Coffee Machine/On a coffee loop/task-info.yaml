type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: "package machine\n\nimport java.util.Scanner\n\nfun main() {\n//    println(\"\
    Starting to make a coffee\")\n//    println(\"Grinding coffee beans\")\n//   \
    \ println(\"Boiling water\")\n//    println(\"Mixing boiled water with crushed\
    \ coffee beans\")\n//    println(\"Pouring coffee into the cup\")\n//    println(\"\
    Pouring some milk into the cup\")\n//    println(\"Coffee is ready!\")\n\n   \
    \ val scanner = Scanner(System.`in`)\n//    print(\"Write how many cups of coffee\
    \ you will need: \")\n//    val numCups = scanner.nextInt()\n//    val water =\
    \ numCups * 200\n//    val milk = numCups * 50\n//    val beans = numCups * 15\n\
    //    println(\"For $numCups cups of coffee you will need:\")\n//    println(\"\
    $water ml of water\")\n//    println(\"$milk ml of milk\")\n//    println(\"$beans\
    \ g of coffee beans\")\n\n//    println(\"Write how many ml of water the coffee\
    \ machine has: \")\n//    val water = scanner.nextInt()\n//    val waterConstraint\
    \ = water / 200\n//\n//    println(\"Write how many ml of milk the coffee machine\
    \ has: \")\n//    val milk = scanner.nextInt()\n//    val milkConstraint = milk\
    \ / 50\n//\n//    println(\"Write how many grams of coffee beans the coffee machine\
    \ has: \")\n//    val beans = scanner.nextInt()\n//    val beansConstraint = beans\
    \ / 15\n//\n//    var canMake = if (waterConstraint < milkConstraint) waterConstraint\
    \ else milkConstraint\n//    canMake =  if (beansConstraint < canMake) beansConstraint\
    \ else canMake\n//\n//    println(\"Write how many cups of coffee you will need:\
    \ \")\n//    val needed = scanner.nextInt()\n//\n//    if (needed > canMake) {\n\
    //        println(\"No, I can make only $canMake cups of coffee\")\n//    } else\
    \ {\n//        print(\"Yes, I can make that amount of coffee \")\n//        if\
    \ (canMake > needed) {\n//            println(\"(and even ${canMake - needed}\
    \ more than that)\")\n//        }\n//    }\n\n    var water = 400\n    var milk\
    \ = 540\n    var beans = 120\n    var cups = 9\n    var money = 550\n\n    println(\"\
    The coffee machine has: \")\n    println(\"$water of water\")\n    println(\"\
    $milk of milk\")\n    println(\"$beans of coffee beans\")\n    println(\"$cups\
    \ of disposable cups\")\n    println(\"$money of money\")\n    println()\n\n \
    \   print(\"Write action (buy, fill, take): \")\n    when (scanner.next()) {\n\
    \        \"buy\" -> {\n            print(\"What do you want to buy? 1 - espresso,\
    \ 2 - latte, 3 - cappuccino: \")\n            cups -= 1\n            when (scanner.nextInt())\
    \ {\n                1 -> {\n                    water -= 250\n              \
    \      beans -= 16\n                    money += 4\n                }\n      \
    \          2 -> {\n                    water -= 350\n                    milk\
    \ -= 75\n                    beans -= 20\n                    money += 7\n   \
    \             }\n                3 -> {\n                    water -= 200\n  \
    \                  milk -= 100\n                    beans -= 12\n            \
    \        money += 6\n                }\n            }\n        }\n        \"fill\"\
    \ -> {\n            print(\"Write how many ml of water do you want to add: \"\
    )\n            water += scanner.nextInt()\n            print(\"Write how many\
    \ ml of milk do you want to add: \")\n            milk += scanner.nextInt()\n\
    \            print(\"Write how many grams of coffee beans do you want to add:\
    \ \")\n            beans += scanner.nextInt()\n            print(\"Write how many\
    \ cups of coffee do you want to add: \")\n            cups += scanner.nextInt()\n\
    \        }\n        \"take\" -> {\n            println(\"I gave you $$money\"\
    )\n            money = 0\n        }\n    }\n    println()\n    println(\"The coffee\
    \ machine has: \")\n    println(\"$water of water\")\n    println(\"$milk of milk\"\
    )\n    println(\"$beans of coffee beans\")\n    println(\"$cups of disposable\
    \ cups\")\n    println(\"$money of money\")\n\n    var a = 10\n    when (a) {\n\
    \        in 1..20 -> print(\"ok\"); print(\"ok\")\n        in 1..22 -> print(\"\
    ok\")\n        a + a -> print(\"ok\")\n        > 0 -> print(\"ok\")\n        \n\
    \    }\n}\n\n\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/364/implement
status: Solved
record: -1
